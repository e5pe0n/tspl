(define A-org
  (lambda ()
    (let ([x 'a] [y 'b])
      (list (let ([x 'c]) (cons x y))
            (let ([y 'd]) (cons x y))
      )
    )
  )
)
(define B-org
  (lambda ()
    (let ([x `((a b) c)])
      (cons
        (let ([x (cdr x)])
          (car x))
        (let ([x (car x)])
          (cons
            (let ([x (cdr x)])
              (car x)
            )
            (cons
              (let ([x (car x)])
                x
              )
              (cdr x)
            )
          )
        )
      )
    )
  )
)
(define A
  (lambda ()
    (let ([x 'a] [y 'b])
      (list
        (let ([s 'c])
          (cons s y)
        )
        (let ([t 'd])
          (cons x t)
        )
      )
    )
  )
)
(define B
  (lambda ()
    (let ([x0 `((a b) c)])
      (cons
        (let ([x1 (cdr x0)])
          (car x1)
        )
        (let ([x2 (car x0)])
          (cons
            (let ([x3 (cdr x2)])
              (car x3)
            )
            (cons
              (let ([x4 (car x2)])
                x4
              )
              (cdr x2)
            )
          )
        )
      )
    )
  )
)
(print (A-org)) ; ((c . b) (a . d))
(print (B-org)) ; (c b a b)
(newline)
(print (A)) ; ((c . b) (a . d))
(print (B)) ; (c b a b)